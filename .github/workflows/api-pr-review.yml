name: AI PR Review

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  review:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get PR Diff
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          REPO=${{ github.repository }}

          # Get PR diff
          DIFF=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                 "https://api.github.com/repos/$REPO/pulls/$PR_NUMBER.diff")

          echo "$DIFF" > pr_diff.patch

      - name: Call OpenAI API for Code Review
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # Call OpenAI API for PR review
          RESPONSE=$(curl -s -X POST "https://api.openai.com/v1/chat/completions" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "model": "gpt-4-turbo",
              "messages": [
                {"role": "system", "content": "You are an AI code reviewer. Analyze the following PR diff and provide inline comments in JSON format. Output an array of objects with 'file', 'line', and 'comment'."},
                {"role": "user", "content": "'"$(cat pr_diff.patch | head -c 6000)"'"}
              ],
              "max_tokens": 500,
              "response_format": "json"
            }')

          echo "$RESPONSE" > ai_review.json

      - name: Process AI Response or Use Mock Data
        run: |
          # Extract JSON array from OpenAI response
          AI_COMMENTS=$(jq -r '.choices[0].message.content' ai_review.json || echo "")

          # If AI response is empty, use mock response
          if [[ -z "$AI_COMMENTS" || "$AI_COMMENTS" == "null" ]]; then
            echo "Using mock response..."
            AI_COMMENTS='[
              {
                "file": "src/components/Button.tsx",
                "line": 1,
                "comment": "Consider renaming this variable for better readability."
              }
            ]'
          fi

          echo "$AI_COMMENTS" > final_comments.json

      - name: Post AI Comments to PR
        env:
          GITHUB_TOKEN: ${{ secrets.OPENAI_API_KEY }}
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          REPO=${{ github.repository }}

          # Loop through comments and post each
          cat final_comments.json | jq -c '.[]' | while read comment; do
            FILE=$(echo "$comment" | jq -r '.file')
            LINE=$(echo "$comment" | jq -r '.line')
            BODY=$(echo "$comment" | jq -r '.comment')

            curl -s -X POST -H "Authorization: token $OPENAI_API_KEY" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/$REPO/pulls/$PR_NUMBER/comments \
              -d "{
                \"body\": \"$BODY\",
                \"commit_id\": \"${{ github.event.pull_request.head.sha }}\",
                \"path\": \"$FILE\",
                \"position\": $LINE
              }"
          done
