name: AI PR Review

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  ai_review:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Fetch PR Diff
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}
          git diff origin/${{ github.event.pull_request.base.ref }} HEAD > pr_diff.txt

      - name: Debug PR Diff Content
        run: |
          echo "üîç PR Diff Content:"
          cat pr_diff.txt || echo "‚ö†Ô∏è No changes detected in diff!"

      - name: Call OpenAI for Review
        id: ai_review
        shell: bash
        run: |
          # Ensure pr_diff.txt exists and is not empty
          if [ ! -f pr_diff.txt ] || [ ! -s pr_diff.txt ]; then
            echo "‚ö†Ô∏è No code changes detected in PR or pr_diff.txt is missing. Skipping AI review."
            exit 0
          fi

          # Read and escape PR diff content properly
          DIFF_CONTENT=$(jq -Rs '.' < pr_diff.txt)

          # Construct the JSON payload safely using jq
          JSON_PAYLOAD=$(jq -n --arg diff "$DIFF_CONTENT" '{
            "model": "gpt-3.5-turbo-instruct-0914",
            "messages": [
              { "role": "system", "content": "You are an expert code reviewer. Analyze the given code diff and provide constructive feedback." },
              { "role": "user", "content": ("Here is the code diff:\n" + $diff + "\nPlease review and provide comments.") }
            ]
          }')

          # üîç Debugging: Print the full JSON payload before sending it
          echo "üîç JSON Payload (Formatted):"
          echo "$JSON_PAYLOAD" | jq .

          # Call OpenAI API
          RESPONSE=$(curl -s -X POST "https://api.openai.com/v1/chat/completions" \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD")

          echo "üîç OpenAI Full Response: $RESPONSE" # Debugging: print full API response
          
          # Extract the review comment from OpenAI's response
          REVIEW_COMMENT=$(echo "$RESPONSE" | jq -r '.choices[0].message.content' || echo "‚ö†Ô∏è Error parsing AI response.")

          if [ -z "$REVIEW_COMMENT" ] || [ "$REVIEW_COMMENT" = "null" ]; then
            REVIEW_COMMENT="ü§ñ AI Review: No comments were generated. Please check the input or refine the prompt."
          fi

          echo "$REVIEW_COMMENT" > review_comment.txt
          echo "::set-output name=review::$REVIEW_COMMENT"

      - name: Post AI Review as PR Comment
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            **ü§ñ AI Code Review:**
            ${{ steps.ai_review.outputs.review }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}