name: AI PR Review

on:
  pull_request:
    types: [opened, synchronize, edited, reopened, ready_for_review]

jobs:
  ai_review:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Fetch PR Diff
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}
          git diff origin/${{ github.event.pull_request.base.ref }} HEAD > pr_diff.txt

      - name: Debug PR Diff Content
        run: |
          echo "üîç PR Diff Content:"
          cat pr_diff.txt || echo "‚ö†Ô∏è No changes detected in diff!"

      - name: Call OpenAI for Review
        id: ai_review
        shell: bash
        run: |
          # Ensure pr_diff.txt exists and is not empty
          if [ ! -f pr_diff.txt ] || [ ! -s pr_diff.txt ]; then
            echo "‚ö†Ô∏è No code changes detected in PR or pr_diff.txt is missing. Skipping AI review."
            exit 0
          fi

          # Static AI Review Inline Comments
          RESPONSE=$(cat <<'EOF'
          {
            "review": {
              "summary": "‚úÖ Overall, the code is well-structured. ‚ö†Ô∏è Some minor improvements are suggested.",
              "comments": [
                {
                  "file": "src/components/Button.tsx",
                  "line": 1,
                  "comment": "‚ö†Ô∏è **Missing prop types or TypeScript typings** ‚Äì Consider explicitly defining the prop types for better type safety.\n\nüí° Suggested change:\n```tsx\ninterface ButtonProps {\n  label: string;\n  onClick: () => void;\n}\n\nconst Button: React.FC<ButtonProps> = ({ label, onClick }) => {\n  return <button onClick={onClick}>{label}</button>;\n};\n```"
                }
              ]
            }
          }
          EOF
          )

          echo "üîç OpenAI Full Response: $RESPONSE" # Debugging: print full API response
          
          # Extract the review comment from OpenAI's response
          REVIEW_COMMENT=$(echo "$RESPONSE" | jq -r '.review.summary' || echo "‚ö†Ô∏è Error parsing AI response.")

          # Assign static inline comments
          REVIEW_INLINE_COMMENT=$(cat <<'EOF'
          [
            {
              "file": "src/components/Button.tsx",
              "line": 1,
              "comment": "‚ö†Ô∏è **Missing prop types or TypeScript typings** ‚Äì Consider explicitly defining the prop types for better type safety.\n\nüí° Suggested change:\n```tsx\ninterface ButtonProps {\n  label: string;\n  onClick: () => void;\n}\n\nconst Button: React.FC<ButtonProps> = ({ label, onClick }) => {\n  return <button onClick={onClick}>{label}</button>;\n};\n```"
            }
          ]
          EOF
          )

          echo "$REVIEW_INLINE_COMMENT" > inline_comments.json

          echo "::set-output name=review::$REVIEW_COMMENT"

      - name: Post AI Review as PR Comment
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            **ü§ñ AI Code Review Summary:**
            ${{ steps.ai_review.outputs.review }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Post AI Inline Comments
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ ! -f inline_comments.json ] || [ ! -s inline_comments.json ]; then
            echo "‚úÖ No inline comments to post."
            exit 0
          fi
          
          cat inline_comments.json  # Debug JSON content
          while IFS= read -r COMMENT; do
          FILE=$(echo "$COMMENT" | jq -r '.file')
          LINE=$(echo "$COMMENT" | jq -r '.line')
          TEXT=$(echo "$COMMENT" | jq -r '.comment')
          gh api repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/comments \
          -X POST \
          -F "body=$TEXT" \
          -F "commit_id=${{ github.event.pull_request.head.sha }}" \
          -F "path=$FILE" \
          -F "line=$LINE"
          -F "side=RIGHT"
          echo "GitHub API Response: $RESPONSE"
